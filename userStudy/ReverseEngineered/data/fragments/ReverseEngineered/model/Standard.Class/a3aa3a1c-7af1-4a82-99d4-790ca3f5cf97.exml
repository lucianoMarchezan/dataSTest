<?xml version="1.0" ?>
<!--GENERATED FILE, PLEASE DO NOT EDIT!!!--><EXT object="TestAll" version="4">
  <OBJECT>
    <ID name="TestAll" mc="Standard.Class" uid="a3aa3a1c-7af1-4a82-99d4-790ca3f5cf97"/>
    <PID name="testCentral" mc="Standard.Package" uid="862f80a5-212d-4e52-b4c4-03785a9f3b1f"/>
    <ATTRIBUTES>
      <ATT name="IsActive">false</ATT>
      <ATT name="IsMain">false</ATT>
      <ATT name="IsElementary">false</ATT>
      <ATT name="IsAbstract">false</ATT>
      <ATT name="IsLeaf">false</ATT>
      <ATT name="IsRoot">false</ATT>
      <ATT name="Visibility">Public</ATT>
      <ATT name="Name"><![CDATA[TestAll]]></ATT>
      <ATT name="status">1970354901745664</ATT>
    </ATTRIBUTES>
    <DEPENDENCIES>
      <COMP relation="OwnedOperation">
        <OBJECT>
          <ID name="main" mc="Standard.Operation" uid="c118c76a-4ef4-4a30-9e88-0a224c779066"/>
          <ATTRIBUTES>
            <ATT name="Concurrency">false</ATT>
            <ATT name="Final">false</ATT>
            <ATT name="Passing">MethodOut</ATT>
            <ATT name="Visibility">Public</ATT>
            <ATT name="IsClass">true</ATT>
            <ATT name="IsAbstract">false</ATT>
            <ATT name="Name"><![CDATA[main]]></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <COMP relation="IO">
              <OBJECT>
                <ID name="args" mc="Standard.Parameter" uid="f7a09e45-bb9c-4785-a437-676073533152"/>
                <ATTRIBUTES>
                  <ATT name="ParameterPassing">In</ATT>
                  <ATT name="MultiplicityMin"><![CDATA[0]]></ATT>
                  <ATT name="MultiplicityMax"><![CDATA[*]]></ATT>
                  <ATT name="TypeConstraint"></ATT>
                  <ATT name="DefaultValue"></ATT>
                  <ATT name="IsOrdered">false</ATT>
                  <ATT name="IsUnique">false</ATT>
                  <ATT name="IsException">false</ATT>
                  <ATT name="IsStream">false</ATT>
                  <ATT name="Effect">ReadEffect</ATT>
                  <ATT name="Name"><![CDATA[args]]></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <COMP relation="Tag">
                    <OBJECT>
                      <ID name="" mc="Infrastructure.TaggedValue" uid="5d499671-eff4-44cc-be49-b7014290785c"/>
                      <ATTRIBUTES>
                        <ATT name="Name"></ATT>
                        <ATT name="status">1970354901745664</ATT>
                      </ATTRIBUTES>
                      <DEPENDENCIES>
                        <COMP relation="Actual">
                          <OBJECT>
                            <ID name="" mc="Infrastructure.TagParameter" uid="7ef470f1-1a87-443f-89ad-d8485fc9105b"/>
                            <ATTRIBUTES>
                              <ATT name="Value"><![CDATA[Array]]></ATT>
                              <ATT name="status">1970354901745664</ATT>
                            </ATTRIBUTES>
                            <DEPENDENCIES></DEPENDENCIES>
                          </OBJECT>
                        </COMP>
                        <LINK relation="Definition">
                          <FOREIGNID name="type" mc="Infrastructure.TagType" uid="00000000-0000-3767-0000-000000000000"/>
                        </LINK>
                      </DEPENDENCIES>
                    </OBJECT>
                    <OBJECT>
                      <ID name="" mc="Infrastructure.TaggedValue" uid="aa6aad68-e576-4893-b5d2-ec6c955e322d"/>
                      <ATTRIBUTES>
                        <ATT name="Name"></ATT>
                        <ATT name="status">1970354901745664</ATT>
                      </ATTRIBUTES>
                      <DEPENDENCIES>
                        <COMP relation="Actual">
                          <OBJECT>
                            <ID name="" mc="Infrastructure.TagParameter" uid="a6dc1da3-0090-44b0-99e9-f9fa85464bb4"/>
                            <ATTRIBUTES>
                              <ATT name="Value"><![CDATA[String]]></ATT>
                              <ATT name="status">1970354901745664</ATT>
                            </ATTRIBUTES>
                            <DEPENDENCIES></DEPENDENCIES>
                          </OBJECT>
                        </COMP>
                        <LINK relation="Definition">
                          <FOREIGNID name="JavaTypeExpr" mc="Infrastructure.TagType" uid="00380080-0000-01a4-0000-000000000000"/>
                        </LINK>
                      </DEPENDENCIES>
                    </OBJECT>
                  </COMP>
                </DEPENDENCIES>
              </OBJECT>
            </COMP>
            <COMP relation="Descriptor">
              <OBJECT>
                <ID name="" mc="Infrastructure.Note" uid="bdbbbe5a-e352-4323-b044-e740b884b1fd"/>
                <ATTRIBUTES>
                  <ATT name="Content"><![CDATA[int successful = 0;
int failed = 0;
int totalpoints = 0;
final int maxpoints = 373; 
Hashtable tests = new Hashtable();
Hashtable points = new Hashtable();
//-------------OPERATOR Test Cases---------------//
try{
    TestOperatorLogin tol = new TestOperatorLogin();
    tests.put("TestOperatorLogin",new Boolean(tol.test()));
    points.put("TestOperatorLogin",new Integer(tol.points));
}
catch(Error e){
    tests.put("TestOperatorLogin",new Boolean(false));}

try{
    TestOperatorLoginLogout toll = new TestOperatorLoginLogout();
    tests.put("TestOperatorLoginLogout",new Boolean(toll.test()));
    points.put("TestOperatorLoginLogout",new Integer(toll.points));
    
}
catch(Error e){
    tests.put("TestOperatorLoginLogout",new Boolean(false));
    }

try{
    FTestOperatorLogout ftol = new FTestOperatorLogout();
    tests.put("FTestOperatorLogout",new Boolean(ftol.test()));
    points.put("FTestOperatorLogout",new Integer(ftol.points));
}
catch(Error e){
    tests.put("FTestOperatorLogout",new Boolean(false));}

try{
    TestOperatorSO toso = new TestOperatorSO();
    tests.put("TestOperatorSubmitOrder",new Boolean(toso.test()));
    points.put("TestOperatorSubmitOrder",new Integer(toso.points));
}
catch(Error e){
    tests.put("TestOperatorSubmitOrder",new Boolean(false));}

try{
    TestOperatorSO2 toso2 = new TestOperatorSO2();
    tests.put("TestOperatorSubmitOrder2",new Boolean(toso2.test()));
    points.put("TestOperatorSubmitOrder2",new Integer(toso2.points));
}
catch(Error e){
    tests.put("TestOperatorSubmitOrder2",new Boolean(false));}

try{
    TestOperatorSO3 toso3 = new TestOperatorSO3();
    tests.put("TestOperatorSubmitOrder3",new Boolean(toso3.test()));
    points.put("TestOperatorSubmitOrder3",new Integer(toso3.points));
}
catch(Error e){
    tests.put("TestOperatorSubmitOrder3",new Boolean(false));}

try{
    TestOperatorSO4 toso4 = new TestOperatorSO4();
    tests.put("TestOperatorSubmitOrder4",new Boolean(toso4.test()));
    points.put("TestOperatorSubmitOrder4",new Integer(toso4.points));
}
catch(Error e){
    tests.put("TestOperatorSubmitOrder4",new Boolean(false));}

try{
    TestOperatorSO5 toso5 = new TestOperatorSO5();
    tests.put("TestOperatorSubmitOrder5",new Boolean(toso5.test()));
    points.put("TestOperatorSubmitOrder5",new Integer(toso5.points));
}
catch(Error e){
    tests.put("TestOperatorSubmitOrder5",new Boolean(false));}

try{
    TestOperatorSTM tostm = new TestOperatorSTM();
    tests.put("TestOperatorSendTextMessage",new Boolean(tostm.test()));
    points.put("TestOperatorSendTextMessage",new Integer(tostm.points));
}
catch(Error e){
    tests.put("TestOperatorSendTextMessage",new Boolean(false));}

try{
    TestOperatorSTM2 tostm2 = new TestOperatorSTM2();
    tests.put("TestOperatorSendTextMessage2",new Boolean(tostm2.test()));
    points.put("TestOperatorSendTextMessage2",new Integer(tostm2.points));
}
catch(Error e){
    tests.put("TestOperatorSendTextMessage2",new Boolean(false));}

/*try{
    TestOperatorSTM3 tostm3 = new TestOperatorSTM3();
    tests.put("TestOperatorSendTextMessage3",new Boolean(tostm3.test()));
}
catch(Error e){
    tests.put("TestOperatorSendTextMessage3",new Boolean(false));}
*/
try{
    TestOperatorSVM tosvm = new TestOperatorSVM();
    tests.put("TestOperatorSendVoiceMessage",new Boolean(tosvm.test()));
    points.put("TestOperatorSendVoiceMessage",new Integer(tosvm.points));
}
catch(Error e){
    tests.put("TestOperatorSendVoiceMessage",new Boolean(false));}

try{
    TestOperatorSVM2 tosvm2 = new TestOperatorSVM2();
    tests.put("TestOperatorSendVoiceMessage2",new Boolean(tosvm2.test()));
    points.put("TestOperatorSendVoiceMessage2",new Integer(tosvm2.points));
}
catch(Error e){
    tests.put("TestOperatorSendVoiceMessage2",new Boolean(false));}

try{
    FTestOperatorSVM3 ftosvm3 = new FTestOperatorSVM3();
    tests.put("FTestOperatorSendVoiceMessage3",new Boolean(ftosvm3.test()));
    points.put("FTestOperatorSendVoiceMessage3",new Integer(ftosvm3.points));
}
catch(Error e){
    tests.put("FTestOperatorSendVoiceMessage3",new Boolean(false));}

try{
    TestOperatorNoLogin tonl = new TestOperatorNoLogin();
    tests.put("TestOperatorNoLogin",new Boolean(tonl.test()));
    points.put("TestOperatorNoLogin",new Integer(tonl.points));
}
catch(Error e){
    tests.put("TestOperatorNoLogin",new Boolean(false));}

try{
    TestOperatorNoLogin2 tonl2 = new TestOperatorNoLogin2();
    tests.put("TestOperatorNoLogin2",new Boolean(tonl2.test()));
    points.put("TestOperatorNoLogin2",new Integer(tonl2.points));
}
catch(Error e){
    tests.put("TestOperatorNoLogin2",new Boolean(false));}

try{
    TestOperatorNoLogin3 tonl3 = new TestOperatorNoLogin3();
    tests.put("TestOperatorNoLogin3",new Boolean(tonl3.test()));
    points.put("TestOperatorNoLogin3",new Integer(tonl3.points));
}
catch(Error e){
    tests.put("TestOperatorNoLogin3",new Boolean(false));}

//------------TAXI Test Cases---------------//

try{
    TestTaxiLogin ttl = new TestTaxiLogin();
    tests.put("TestTaxiLogin",new Boolean(ttl.test()));
    points.put("TestTaxiLogin",new Integer(ttl.points));
}
catch(Error e){
    tests.put("TestTaxiLogin",new Boolean(false));}

try{
    TestTaxiLogout ttlo = new TestTaxiLogout();
    tests.put("TestTaxiLogout",new Boolean(ttlo.test()));
    points.put("TestTaxiLogout",new Integer(ttlo.points));
}
catch(Error e){
    tests.put("TestTaxiLogout",new Boolean(false));}

try{
    TestTaxiSVM ttsvm = new TestTaxiSVM();
    tests.put("TestTaxiSendVoiceMessage",new Boolean(ttsvm.test()));
    points.put("TestTaxiSendVoiceMessage",new Integer(ttsvm.points));
}
catch(Error e){
    tests.put("TestTaxiSendVoiceMessage",new Boolean(false));}

try{
    TestTaxiSVM2 ttsvm2 = new TestTaxiSVM2();
    tests.put("TestTaxiSendVoiceMessage2",new Boolean(ttsvm2.test()));
    points.put("TestTaxiSendVoiceMessage2",new Integer(ttsvm2.points));
}
catch(Error e){
    tests.put("TestTaxiSendVoiceMessage2",new Boolean(false));}

try{
    TestTaxiState tts = new TestTaxiState();
    tests.put("TestTaxiState",new Boolean(tts.test()));
    points.put("TestTaxiState",new Integer(tts.points));
}
catch(Error e){
    tests.put("TestTaxiState",new Boolean(false));}

try{
    TestTaxiState2 tts2 = new TestTaxiState2();
    tests.put("TestTaxiState2",new Boolean(tts2.test()));
    points.put("TestTaxiState2",new Integer(tts2.points));
}
catch(Error e){
    tests.put("TestTaxiState2",new Boolean(false));}

try{
    TestTaxiState3 tts3 = new TestTaxiState3();
    tests.put("TestTaxiState3",new Boolean(tts3.test()));
    points.put("TestTaxiState3",new Integer(tts3.points));
}
catch(Error e){
    tests.put("TestTaxiState3",new Boolean(false));}

try{
    TestTaxiSO ttso = new TestTaxiSO();
    tests.put("TestTaxiSubmitOrder",new Boolean(ttso.test()));
    points.put("TestTaxiSubmitOrder",new Integer(ttso.points));
}
catch(Error e){
    tests.put("TestTaxiSubmitOrder",new Boolean(false));}

try{
    FTestTaxiLogout fttlo = new FTestTaxiLogout();
    tests.put("FTestTaxiLogout",new Boolean(fttlo.test()));
    points.put("FTestTaxiLogout",new Integer(fttlo.points));
}
catch(Error e){
    tests.put("FTestTaxiLogout",new Boolean(false));
}

// ------------ validate parameters Tests ------------------//
try{
    TestVOperatorLogin tvo = new TestVOperatorLogin();
    tests.put("TestValidateOperator",new Boolean(tvo.test()));
    points.put("TestValidateOperator",new Integer(tvo.points));
}
catch(Error e){
    tests.put("TestValidateOperator",new Boolean(false));}

try{
    TestVOperatorNewOrder tvono = new TestVOperatorNewOrder();
    tests.put("TestValidateOperatorNewOrder",new Boolean(tvono.test()));
    points.put("TestValidateOperatorNewOrder",new Integer(tvono.points));
}
catch(Error e){
    tests.put("TestValidateOperatorNewOrder",new Boolean(false));}

try{
    TestVOperatorNewOrder2 tvono2 = new TestVOperatorNewOrder2();
    tests.put("TestValidateOperatorNewOrder2",new Boolean(tvono2.test()));
    points.put("TestValidateOperatorNewOrder2",new Integer(tvono2.points));
}
catch(Error e){
    tests.put("TestValidateOperatorNewOrder2",new Boolean(false));}

try{
    TestVOperatorNewOrder3 tvono3 = new TestVOperatorNewOrder3();
    tests.put("TestValidateOperatorNewOrder3",new Boolean(tvono3.test()));
    points.put("TestValidateOperatorNewOrder3",new Integer(tvono3.points));
}
catch(Error e){
    tests.put("TestValidateOperatorNewOrder3",new Boolean(false));}

try{
    TestVOperatorNewOrder4 tvono4 = new TestVOperatorNewOrder4();
    tests.put("TestValidateOperatorNewOrder4",new Boolean(tvono4.test()));
    points.put("TestValidateOperatorNewOrder4",new Integer(tvono4.points));
}
catch(Error e){
    tests.put("TestValidateOperatorNewOrder4",new Boolean(false));}

try{
    TestVOperatorNewOrder5 tvono5 = new TestVOperatorNewOrder5();
    tests.put("TestValidateOperatorNewOrder5",new Boolean(tvono5.test()));
    points.put("TestValidateOperatorNewOrder5",new Integer(tvono5.points));
}
catch(Error e){
    tests.put("TestValidateOperatorNewOrder5",new Boolean(false));}

try{
    TestVOperatorSTM tvstm = new TestVOperatorSTM();
    tests.put("TestValidateOperatorSendTextMessage",new Boolean(tvstm.test()));
    points.put("TestValidateOperatorSendTextMessage",new Integer(tvstm.points));
}
catch(Error e){
    tests.put("TestValidateOperatorSendTextMessage",new Boolean(false));}

try{
    TestVOperatorSTM2 tvstm2 = new TestVOperatorSTM2();
    tests.put("TestValidateOperatorSendTextMessage2",new Boolean(tvstm2.test()));
    points.put("TestValidateOperatorSendTextMessage2",new Integer(tvstm2.points));
}
catch(Error e){
    tests.put("TestValidateOperatorSendTextMessage2",new Boolean(false));}

try{
    TestVOperatorSVM tvsvm = new TestVOperatorSVM();
    tests.put("TestValidateOperatorSendVoiceMessage",new Boolean(tvsvm.test()));
    points.put("TestValidateOperatorSendVoiceMessage",new Integer(tvsvm.points));
}
catch(Error e){
    tests.put("TestValidateOperatorSendVoiceMessage",new Boolean(false));}

//all test done
Enumeration keys = tests.keys();
String s = null;
String result = new String();
while(keys.hasMoreElements()){
    s = (String)keys.nextElement();
    if(tests.get(s).equals(new Boolean(true))){
        totalpoints += ((Integer)points.get(s)).intValue();
        successful++;
        result += s + " succesful\n";
    }
    else {
        failed++;
        result += s + " failed\n";
    }
}
result +="\n--------------------------------\n"+successful+" Tests ok\n"+failed+" Tests failed";
result +="\n"+totalpoints+"/"+maxpoints +" Points";

System.out.println(result);
//        write results to file
File out = new File("results.txt");
BufferedWriter bw;
try {
    bw = new BufferedWriter(new FileWriter(out));
    bw.write(result);
    bw.close();
}
catch (IOException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
}
]]></ATT>
                  <ATT name="MimeType"><![CDATA[text/plain]]></ATT>
                  <ATT name="Name"></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="Model">
                    <FOREIGNID name="JavaCode" mc="Infrastructure.NoteType" uid="003800a8-0000-018e-0000-000000000000"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
            </COMP>
          </DEPENDENCIES>
        </OBJECT>
      </COMP>
      <LINK relation="Extension">
        <FOREIGNID name="JavaClass" mc="Infrastructure.Stereotype" uid="01ec23a8-0000-0258-0000-000000000000"/>
      </LINK>
      <COMP relation="Tag">
        <OBJECT>
          <ID name="" mc="Infrastructure.TaggedValue" uid="cd5b4319-489d-4c09-a3af-cf4e931f50f7"/>
          <ATTRIBUTES>
            <ATT name="Name"></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <COMP relation="Actual">
              <OBJECT>
                <ID name="" mc="Infrastructure.TagParameter" uid="74aa3cf9-60f0-438f-8ace-9cdfab05ec21"/>
                <ATTRIBUTES>
                  <ATT name="Value"><![CDATA[java.io.BufferedWriter]]></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES></DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="" mc="Infrastructure.TagParameter" uid="c35cb981-6eb5-425d-a213-c9df36e7be89"/>
                <ATTRIBUTES>
                  <ATT name="Value"><![CDATA[java.io.File]]></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES></DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="" mc="Infrastructure.TagParameter" uid="a95f915c-458e-4c1e-afda-50f40d2d1afc"/>
                <ATTRIBUTES>
                  <ATT name="Value"><![CDATA[java.io.FileWriter]]></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES></DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="" mc="Infrastructure.TagParameter" uid="07a131e4-2f32-4130-b255-0284e11b5c95"/>
                <ATTRIBUTES>
                  <ATT name="Value"><![CDATA[java.io.IOException]]></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES></DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="" mc="Infrastructure.TagParameter" uid="b720ff47-4028-4819-95c4-dcb2d934af29"/>
                <ATTRIBUTES>
                  <ATT name="Value"><![CDATA[java.util.Enumeration]]></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES></DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="" mc="Infrastructure.TagParameter" uid="2435dec8-7cd5-4c76-a02d-7c45ef5e6f3e"/>
                <ATTRIBUTES>
                  <ATT name="Value"><![CDATA[java.util.Hashtable]]></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES></DEPENDENCIES>
              </OBJECT>
            </COMP>
            <LINK relation="Definition">
              <FOREIGNID name="JavaImport" mc="Infrastructure.TagType" uid="003800a8-0000-0155-0000-000000000000"/>
            </LINK>
          </DEPENDENCIES>
        </OBJECT>
      </COMP>
      <COMP relation="Descriptor">
        <OBJECT>
          <ID name="" mc="Infrastructure.Note" uid="dcd18310-fd61-4096-b70e-d84d0b714463"/>
          <ATTRIBUTES>
            <ATT name="Content"><![CDATA[@author Thomas Misar e0025068@stud3.tuwien.ac.at]]></ATT>
            <ATT name="MimeType"><![CDATA[text/plain]]></ATT>
            <ATT name="Name"></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <LINK relation="Model">
              <FOREIGNID name="Javadoc" mc="Infrastructure.NoteType" uid="003800a8-0000-015d-0000-000000000000"/>
            </LINK>
          </DEPENDENCIES>
        </OBJECT>
        <OBJECT>
          <ID name="" mc="Infrastructure.Note" uid="f43ee473-93ef-430b-b3f6-dd74ef7b4a9f"/>
          <ATTRIBUTES>
            <ATT name="Content"><![CDATA[/*
 * Created on 01.09.2004
 *
 */]]></ATT>
            <ATT name="MimeType"><![CDATA[text/plain]]></ATT>
            <ATT name="Name"></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <LINK relation="Model">
              <FOREIGNID name="JavaTop" mc="Infrastructure.NoteType" uid="01840500-0000-a2a0-0000-000000000000"/>
            </LINK>
          </DEPENDENCIES>
        </OBJECT>
      </COMP>
    </DEPENDENCIES>
  </OBJECT>
</EXT>