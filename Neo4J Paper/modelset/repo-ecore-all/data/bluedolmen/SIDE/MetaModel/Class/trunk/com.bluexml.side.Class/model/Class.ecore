<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="clazz"
    nsURI="http://www.kerblue.org/class/1.0" nsPrefix="clazz">
  <eClassifiers xsi:type="ecore:EClass" name="ClassModelElement" eSuperTypes="../../com.bluexml.side.Common/model/Common.ecore#//ModelElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Definition: 'Has comment' allows to link a class to a comment."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasComments" upperBound="-1"
        eType="#//ClassComment" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ClassPackage" eSuperTypes="../../com.bluexml.side.Common/model/Common.ecore#//Package">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Definition: a package allows to organize class/data; this is similar to Java package structure.&#xD;&#xA;Constraints: the fully qualified name of a class is compose of the successive names of the containing package and the attribute name of the class. This fully qualified name must be unique in your application. For instance, 'org.bluexml.library.mediaVideo' identifies the class mediaVideo contains in the 'library' package, itself contains in the 'bluexml' package, itself contains in the 'org' package."/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="PackageNameNull"/>
    </eAnnotations>
    <eAnnotations source="http://www.bluexml.com/OCL">
      <details key="PackageNameNull" value="not self.name.oclIsUndefined() and self.name &lt;> ''"/>
    </eAnnotations>
    <eOperations name="getAllPackages" upperBound="-1" eType="#//ClassPackage">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="ClassPackage.allInstances()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllClasses" upperBound="-1" eType="#//Clazz">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="Clazz.allInstances()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllEnumerations" upperBound="-1" eType="#//Enumeration">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="Enumeration.allInstances()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllAspects" upperBound="-1" eType="#//Aspect">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="Aspect.allInstances()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllAssociations" upperBound="-1" eType="#//Association">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="Association.allInstances()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllAbstractClasses" upperBound="-1" eType="#//AbstractClass">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="AbstractClass.allInstances()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllClassesFromEveryWhere" upperBound="-1" eType="#//Clazz">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="getAllAbstractClassesAndReferences() -> select(x | x.oclIsTypeOf(Clazz))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllAspectsFromEveryWhere" upperBound="-1" eType="#//Aspect">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="getAllAbstractClassesAndReferences() -> select(x | x.oclIsTypeOf(Aspect))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllConstraints" upperBound="-1" eType="ecore:EClass ../../com.bluexml.side.Common/model/Common.ecore#//Constraint">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="common::Constraint.allInstances()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllAbstractClassesAndLinked" upperBound="-1" eType="#//AbstractClass">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="AbstractClass.allInstances().getAllLinkedAbstractClass()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllAbstractClassesAndReferences" upperBound="-1" eType="#//AbstractClass">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="AbstractClass.allInstances().getAllLinkedAbstractClass() -> union(AbstractClass.allInstances().getAssociatedClasses())"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllCustomDataType" upperBound="-1" eType="ecore:EClass ../../com.bluexml.side.Common/model/Common.ecore#//CustomDataType">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="common::CustomDataType.allInstances()"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="classSet" upperBound="-1"
        eType="#//Clazz" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="associationSet" upperBound="-1"
        eType="#//Association" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="aspectSet" upperBound="-1"
        eType="#//Aspect" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="enumerationSet" upperBound="-1"
        eType="#//Enumeration" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="constraintSet" upperBound="-1"
        eType="ecore:EClass ../../com.bluexml.side.Common/model/Common.ecore#//Constraint"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="customDataTypeSet" upperBound="-1"
        eType="ecore:EClass ../../com.bluexml.side.Common/model/Common.ecore#//CustomDataType"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AbstractClass" abstract="true" eSuperTypes="#//TitledNamedClassModelElement ../../com.bluexml.side.Common/model/Common.ecore#//Container">
    <eAnnotations source="http://www.bluexml.com/OCL">
      <details key="TwoModelElementWithSameName" value="AbstractClass.allInstances()->select(a | a.name = self.name and a.getContainer() = self.getContainer() and a &lt;> self)->size() = 0"/>
      <details key="NameNull" value="not self.name.oclIsUndefined() and self.name &lt;> ''"/>
      <details key="noSpecialCharacters" value="self.name.regexMatch('[a-zA-Z0-9-]*') = true"/>
      <details key="TwoAttributesSameName" value="self.attributes -> forAll( a1, a2 | a1 &lt;> a2 implies a1.name &lt;>a2.name)"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="TwoModelElementWithSameName NameNull noSpecialCharacters TwoAttributesSameName"/>
    </eAnnotations>
    <eOperations name="equalsForMerge" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="self.name = other.name and self.title = other.title"/>
      </eAnnotations>
      <eParameters name="other" eType="#//AbstractClass"/>
    </eOperations>
    <eOperations name="getInheritedClasses" upperBound="-1" eType="#//AbstractClass">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="self.generalizations  ->  asSet()  -> iterate(e:AbstractClass;result :Set(AbstractClass)= Set{}| result -> including(e) -> union(e.getInheritedClasses()))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getSubTypes" upperBound="-1" eType="#//Clazz">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="AbstractClass.allInstances() ->select(e:AbstractClass|e.generalizations() ->includes(self) )"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllSubTypes" upperBound="-1" eType="#//AbstractClass">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="AbstractClass.allInstances() ->select(e:AbstractClass|e.getInheritedClasses() ->includes(self) )"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getSourceAssociations" upperBound="-1" eType="#//Association">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="Association.allInstances() ->select(c:Association|self.isSource(c))"/>
        <details key="description" value="search association where this clazz is source"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isSource" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="(asso.firstEnd.linkedClass = self and asso.secondEnd.navigable) or (asso.secondEnd.linkedClass = self and asso.firstEnd.navigable)"/>
        <details key="description" value="search for class attributes, inherited one and finaly added to the class by aspect"/>
      </eAnnotations>
      <eParameters name="asso" lowerBound="1" eType="#//Association"/>
    </eOperations>
    <eOperations name="isTarget" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="(asso.firstEnd.linkedClass = self and asso.firstEnd.navigable) or (asso.secondEnd.linkedClass = self and asso.secondEnd.navigable)"/>
        <details key="description" value="search for class attributes, inherited one and finaly added to the class by aspect"/>
      </eAnnotations>
      <eParameters name="asso" lowerBound="1" eType="#//Association"/>
    </eOperations>
    <eOperations name="getTargetAssociations" upperBound="-1" eType="#//Association">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="Association.allInstances() ->select(c:Association|self.isTarget(c))"/>
        <details key="description" value="search association where this clazz is target"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getSourceAssociationEnds" upperBound="-1" eType="#//AssociationEnd">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="AssociationEnd.allInstances() -> select (ae | ae.getOpposite().navigable and ae.linkedClass = self )"/>
        <details key="description" value="returns association ends where this clazz is source"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getTargetAssociationEnds" upperBound="-1" eType="#//AssociationEnd">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="AssociationEnd.allInstances() -> select (ae | ae.navigable and ae.linkedClass = self)"/>
        <details key="description" value="returns association ends where this clazz is target"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllSourceAssociations" upperBound="-1" eType="#//Association">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="getAllLinkedAbstractClass().getSourceAssociations()"/>
        <details key="description" value="search association where this AbstractClass is source"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllTargetAssociations" upperBound="-1" eType="#//Association">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="getAllLinkedAbstractClass().getTargetAssociations()"/>
        <details key="description" value="search associations where this AbstractClass is source or one of inheritedClass"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAssociatedClasses" upperBound="-1" eType="#//AbstractClass">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="self.getAllSourceAssociations().getTarget() ->asOrderedSet()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllSourceAssociationEnds" upperBound="-1" eType="#//AssociationEnd">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="AssociationEnd.allInstances() -> select (ae | ae.linkedClass.oclIsTypeOf(AbstractClass) and ae.getOpposite().navigable and self.getInheritedClasses() -> including (self) ->includes(ae.linkedClass.oclAsType(AbstractClass)) )"/>
        <details key="description" value="returns association ends where this clazz is source including inherited associations (association ends cannot link to aspects)"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllTargetAssociationEnds" upperBound="-1" eType="#//AssociationEnd">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="AssociationEnd.allInstances() -> select (ae | ae.navigable and self.getInheritedClasses() -> including (self) ->includes(ae.linkedClass) )"/>
        <details key="description" value="returns association ends where this clazz is target including inherited associations (association ends cannot link to aspects)"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllAttributes" upperBound="-1" eType="#//Attribute">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="getAllLinkedAbstractClass().attributes"/>
        <details key="description" value="search for class attributes, inherited one and finaly added to the class by aspect"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getClassAndAspectAttributes" upperBound="-1" eType="#//Attribute">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="self.attributes -> asSet() -> union(self.getAspectAttributes())"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAspectAttributes" upperBound="-1" eType="#//Attribute">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="self.aspects ->  asSet()  -> iterate(e:Aspect;result :Set(Attribute)= Set{}| result -> union(e.getAllAttributes() ->asSet()))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllInheritedClassAndAspectAttributes" upperBound="-1" eType="#//Attribute">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="self.getInheritedClasses() ->asSet().oclAsType(Clazz) ->iterate(cl:Clazz;result:Set(Attribute)=Set{}|result->union(cl.getClassAndAspectAttributes() ->asSet()))"/>
        <details key="description" value="search attributes than is describe in inherited classes (with Aspects)"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllInheritedAspects" upperBound="-1" eType="#//Aspect">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="self.getInheritedClasses().aspects"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllLinkedAbstractClass" upperBound="-1" eType="#//AbstractClass">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="let selfAndInherited : Set(AbstractClass) = self.getInheritedClasses() -> including(self)&#xA;&#x9;&#x9;in selfAndInherited -> union(selfAndInherited.aspects.getAllLinkedAbstractClass())"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllLinkedClasses" upperBound="-1" eType="#//Clazz">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="getAllLinkedAbstractClass() -> select(x | x.oclIsTypeOf(Clazz))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAllLinkedAspects" upperBound="-1" eType="#//Aspect">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="getAllLinkedAbstractClass() -> select(x | x.oclIsTypeOf(Aspect))"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attributes" upperBound="-1"
        eType="#//Attribute" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="generalizations" upperBound="-1"
        eType="#//AbstractClass"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="aspects" upperBound="-1"
        eType="#//Aspect"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Clazz" eSuperTypes="#//AbstractClass">
    <eAnnotations source="http://www.bluexml.com/OCL">
      <details key="InheritanceCycle" value="not self.generalizations ->closure(generalizations)->includes(self)"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="ClassWithTwoAttributesSameName InheritanceCycle"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Definition: a class or data defines a category of instance of objects which shares exactly the same set of attributes. In ECM applications, a class relates to a content type.  SIDE Data model describes data structure for persistence through class and attributes and keeps notation close to UML class diagram to reduce learning curve.&#xD;&#xA;Constraints: the fully qualified name of a class is compose of the successive names of the containing package and the attribute name of the class. This fully qualified name must be unique in your application. For instance, 'org.bluexml.library.mediaVideo' identifies the class mediaVideo contains in the 'library' package, itself contains in the 'bluexml' package, itself contains in the 'org' package.&#xD;&#xA;Example: in an Alfresco application the predefined 'cm:content' is modelized as a class."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operations" upperBound="-1"
        eType="ecore:EClass ../../com.bluexml.side.Common/model/Common.ecore#//OperationComponent"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="abstract" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: this attribute indicates if the class is abstract; an abstract class cannot be instanciated but serve to define an object of more general level. For example, in the library, an abstract class 'media' may be defined to group all the kind of medias; the class 'mediaVideo' inherits of media to specialise 'media' as the media on video support.&#xD;&#xA;Constraint: during modeling, think to class and abstract class as real life objects, class being a specialisation of abstract class like the class 'novel' inherits of the abstracts class 'book'."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="deprecated" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: set this attribute to true if the class is no more used in new version of the model but is only kept to ensure compatibility with previous models."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Association" eSuperTypes="#//TitledNamedClassModelElement">
    <eAnnotations source="http://www.bluexml.com/OCL">
      <details key="reflexiveAssociationMustHaveRole" value="if (self.firstEnd.oclIsTypeOf(Clazz) and self.secondEnd.oclIsTypeOf(Clazz)) then&#xA;( self.isReflexive() and self.firstEnd.navigable and self.secondEnd.navigable ) implies ( ( not self.firstEnd.name.oclIsUndefined() and self.firstEnd.name &lt;> '' ) and ( not self.secondEnd.name.oclIsUndefined() and self.secondEnd.name &lt;> '' ))&#xA;else&#xA;true&#xA;endif"/>
      <details key="MinAndMaxTarget" value="( self.secondEnd.cardMax &lt;> '-1' ) implies ( self.secondEnd.cardMin &lt;= self.secondEnd.cardMax )"/>
      <details key="MinAndMaxSource" value="( self.firstEnd.cardMax &lt;> '-1' ) implies ( self.firstEnd.cardMin &lt;= self.firstEnd.cardMax )"/>
      <details key="NameNull" value="not self.name.oclIsUndefined() and self.name &lt;> ''"/>
      <details key="SourceNull" value="self.firstEnd.linkedClass->notEmpty()"/>
      <details key="TargetNull" value="self.secondEnd.linkedClass->notEmpty()"/>
      <details key="AtLeastOneNavigableEdge" value="(firstEnd.navigable or secondEnd.navigable)"/>
      <details key="ClassCantBeReferencedbyTwoSameNameAssociation" value="if (self.getSource()->first().oclIsTypeOf(Aspect)) then&#xA;&#x9;Association.allInstances()->select(a | a.getSource() = self.getSource())->asSet()->select(a:Association|a.name = self.name)->size() = 1&#xA;else&#xA;&#x9;if (not (self.getSource().generalizations ->closure(generalizations)->intersection(self.getSource()) ->size() >0)) then&#xA;&#x9;&#x9;self.getSource().getAllSourceAssociations() ->asSet() ->select(a:Association|a.name = self.name)->size() = 1&#xA;&#x9;else&#xA;&#x9;&#x9;0 = 1&#xA;&#x9;endif&#xA;endif"/>
      <details key="IfAggregationOrCompositionThenUnidirectionalAssociation" value="(self.associationType &lt;> AssociationType::Direct) implies (self.firstEnd.navigable xor self.secondEnd.navigable )"/>
      <details key="twoWayNavigation" value="(self.firstEnd.navigable and self.secondEnd.navigable) implies (self.firstEnd.name &lt;> '' and self.secondEnd.name &lt;> '')"/>
      <details key="noSpecialCharacters" value="self.name.regexMatch('[\\w\(\),]*') = true"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="reflexiveAssociationMustHaveRole MinAndMaxTarget MinAndMaxSource NameNull SourceNull TargetNull AtLeastOneNavigableEdge ClassCantBeReferencedbyTwoSameNameAssociation IfAggregationOrCompositionThenUnidirectionalAssociation doubleNavigable noSpecialChracters"/>
      <details key="warning" value="twoWayNavigation"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Definition: Association allows to link data sharing particular relationships; for instance, an association may be created between a resume content and a working contract content."/>
    </eAnnotations>
    <eOperations name="equalsForMerge" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="if( self.secondEnd.linkedClass.oclIsKindOf(Classe))&#xD;&#xA;then&#xD;&#xA;self.secondEnd.linkedClass.oclAsType(Classe).equalsForMerge(other.secondEnd.linkedClass.oclAsType(Classe)) and self.firstEnd.linkedClass.oclAsType(Classe).equalsForMerge(other.firstEnd.linkedClass.oclAsType(Classe))&#xD;&#xA;and self.name = other.name&#xD;&#xA;else&#xD;&#xA;true&#xD;&#xA;endif&#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="other" eType="#//Association"/>
    </eOperations>
    <eOperations name="isReflexive" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="(self.firstEnd.linkedClass.getInheritedClasses() ->including(self.firstEnd.linkedClass) ->includes(self.secondEnd.linkedClass) and self.secondEnd.navigable)&#xD;or &#xD;(self.secondEnd.linkedClass.getInheritedClasses() ->including(self.secondEnd.linkedClass) ->includes(self.firstEnd.linkedClass) and self.firstEnd.navigable)&#xD;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getSource" lowerBound="1" upperBound="2" eType="#//AbstractClass">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="if (self.firstEnd.navigable and self.secondEnd.navigable) then &#xD;&#x9;Set{} ->including(self.firstEnd.linkedClass) ->including(self.secondEnd.linkedClass)&#xD;else if (self.firstEnd.navigable) then&#xD;&#x9;&#x9;Set{}->including(self.secondEnd.linkedClass)&#xD;&#x9;else if (self.secondEnd.navigable) then &#xD;&#x9;&#x9;&#x9;Set{}->including(self.firstEnd.linkedClass)&#xD;&#x9;&#x9;else&#xD;&#x9;&#x9;&#x9;Set{}&#xD;&#x9;&#x9;endif&#xD;&#x9;endif&#xD;endif"/>
        <details key="description" value="get source Clazz"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getTarget" lowerBound="1" upperBound="2" eType="#//AbstractClass">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="if (self.firstEnd.navigable and self.secondEnd.navigable) then &#xD;&#x9;Set{} ->including(self.firstEnd.linkedClass) ->including(self.secondEnd.linkedClass)&#xD;else if (self.secondEnd.navigable) then&#xD;&#x9;&#x9;Set{}->including(self.secondEnd.linkedClass)&#xD;&#x9;else if (self.firstEnd.navigable) then &#xD;&#x9;&#x9;&#x9;Set{}->including(self.firstEnd.linkedClass)&#xD;&#x9;&#x9;else&#xD;&#x9;&#x9;&#x9;Set{}&#xD;&#x9;&#x9;endif&#xD;&#x9;endif&#xD;endif"/>
        <details key="description" value="get source Clazz"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getAssociationEnd" upperBound="2" eType="#//AssociationEnd">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="Sequence{self.firstEnd,self.secondEnd} -> select(ae | ae.linkedClass = clazz)&#xA;"/>
        <details key="description" value="returns the association end for which the parameter class (clazz) is linked to"/>
      </eAnnotations>
      <eParameters name="clazz" eType="#//AbstractClass"/>
    </eOperations>
    <eOperations name="isTwoWay" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="self.firstEnd.navigable and self.secondEnd.navigable"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="associationType" eType="#//AssociationType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: an association may be of various type according to the relationship which must be established between two types of data:&#xD;&#xA;- Simple: this indicates that there are links between associated data instanes.&#xD;&#xA;- Aggregation: this indicates a stronger relation between data types which is usually a relation of inclusion; for instance, an association between a wiki and a page.&#xD;&#xA;- Composition: this indicates a composite aggregation and that if a container data type instance is suppressed, the associated contained data type instances must also be suppressed; for instance, if a wiki is suppressed, all its pages must be suppressed."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="firstEnd" eType="#//AssociationEnd"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="secondEnd" eType="#//AssociationEnd"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="ordered" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Attribute" eSuperTypes="#//TitledNamedClassModelElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Definition: a class property descibes a characteristic of the concerned class. For example, the property 'title' of the class 'book' gives the title of the book.&#xD;&#xA;Constraints: &#xD;&#xA;- the name of a class property must be unique between all the direct and inherited property of a class.&#xD;&#xA;- a property is associated to a single class or abstract class; a class or an abstract class may contain zero, one or several properties.&#xD;&#xA;"/>
    </eAnnotations>
    <eAnnotations source="http://www.bluexml.com/OCL">
      <details key="NameNull" value="not self.name.oclIsUndefined() and self.name &lt;> ''"/>
      <details key="noSpecialCharacters" value="self.name.regexMatch('[a-zA-Z0-9-]*') = true"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="NameNull noSpecialCharacters "/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="typ" eType="ecore:EEnum ../../com.bluexml.side.Common/model/Common.ecore#//DataType"
        defaultValueLiteral="String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: the type of a class property allows to define its format; the supported property types are boolean, byte, char, double, float, int, long, short, String, Date, Object.&#xD;&#xA;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="initialValue" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: this attribute allows to set up an initial value to the class property at creation of an object."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="visibility" eType="ecore:EEnum ../../com.bluexml.side.Common/model/Common.ecore#//Visibility"
        defaultValueLiteral="Private">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: this attribute indicates the scope of the class property the possible values are:&#xD;&#xA;- public: the class property is visible to other classes through association.&#xD;&#xA;- private: the class property is not visible to other classes.&#xD;&#xA;- protected: the class property cannot be updated."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="valueList" eType="#//Enumeration"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="unique" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: if true, this attribute inidcates that the class property is part of the unique constraint of the class. This means that the set of values of all the unique property must be unique through all the instances of the class."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="mockup" upperBound="-1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="customType" eType="ecore:EClass ../../com.bluexml.side.Common/model/Common.ecore#//CustomDataType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="../../com.bluexml.side.Common/model/Common.ecore#//NamedModelElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Definition: an enumeration represents a list of values which may be associated to a class property.&#xD;&#xA;Example: the list of languages associated to the property 'language' of a book.&#xD;&#xA;Deprecated: the link'depends of' was used in previous release of SIDE to model a relation between enumeration like between a department list and a country list; this link has been kept for compatibility reason but is no more useful at the data level and is now managed between fields of Form model as a management rule."/>
    </eAnnotations>
    <eAnnotations source="http://www.bluexml.com/OCL">
      <details key="enumDynamicAreNotAvailable" value="dynamic=false"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="warning" value="enumDynamicAreNotAvailable"/>
      <details key="constraints" value="enumDynamicAreNotAvailable"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="literals" upperBound="-1"
        eType="#//EnumerationLiteral" containment="true" eOpposite="#//EnumerationLiteral/enum"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="dynamic" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBooleanObject"
        defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: if false, this attribute indicates that the values of the enumeration are predefined and fixed: they are defined during modeling. If true, this attribute indicates that the set of values of the enumeration may be extended at application runtime."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="depends" eType="#//Enumeration"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Defintion: the item of an enumeration; it is composed of a name and a value."/>
    </eAnnotations>
    <eAnnotations source="http://www.bluexml.com/OCL">
      <details key="NameNull" value="not self.name.oclIsUndefined() and self.name &lt;> ''"/>
      <details key="noSpecialCharacters" value="self.name.regexMatch('[\\w]*') = true"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="NameNull"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: the value of an item of an enumeration.&#xD;&#xA;Constraints: a single value may be defined for a name.&#xD;&#xA;Example: consider the enumeration mediaType : {(videoType, Video), (paperType, Paper), (audioType, Audio),(numericType, File), ...}; a Video media has the mediaType of name videoType and of value Video."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: the identifier of an item of an enumeration.&#xD;&#xA;Constraint: the name is unique in an enumeration"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="enum" eType="#//Enumeration"
        eOpposite="#//Enumeration/literals"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="AssociationType">
    <eLiterals name="Direct"/>
    <eLiterals name="Aggregation" value="1"/>
    <eLiterals name="Composition" value="2" literal="Composition"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Aspect" eSuperTypes="#//AbstractClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Definition: an aspect allows to group attributes in order to isolate a specific characteristic of a data; an aspect may be associated to many different class or content type. To link an aspect to a data type, use the 'Has aspect' link.&#xD;&#xA;Example: if you want to have an automatic revision number for all the content types you defined, you can create an aspect 'Revision' which contains an attribute 'revisionNumber'. In your data modeling, you apply the aspect 'Revision' to all the content types.&#xD;&#xA;Constraints: the fully qualified name of an aspect is compose of the successive names of the containing package and the attribute name of the aspect. This fully qualified name must be unique in your application. For instance, 'org.bluexml.library.revision' identifies the aspect Revision contains in the 'library' package, itself contains in the 'bluexml' package, itself contains in the 'org' package."/>
    </eAnnotations>
    <eOperations name="equalsForMerge" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="self.name = other.name and self.title = other.title"/>
      </eAnnotations>
      <eParameters name="other" eType="#//Aspect"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TitledNamedClassModelElement" abstract="true"
      eSuperTypes="../../com.bluexml.side.Common/model/Common.ecore#//NamedModelElement #//ClassModelElement">
    <eOperations name="getLabel" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="if self.title.oclIsUndefined() or self.title.size() = 0 then&#xD; self.name &#xD;else&#xD; self.title &#xD;endif"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="title" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: the title of the concerned elements. &#xD;&#xA;Constraints: do not forget to set up this value in order to have label associated to generated elements."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ClassComment" eSuperTypes="../../com.bluexml.side.Common/model/Common.ecore#//Comment">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Definition: Comments may be used to describe class. Double click to fill up the comment body with the text you want."/>
    </eAnnotations>
    <eAnnotations source="InternalDoc">
      <details key="documentation" value="Used because we can't put a Comment (from Common) on the diagram. "/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AssociationEnd" eSuperTypes="#//TitledNamedClassModelElement ../../com.bluexml.side.Common/model/Common.ecore#//Comment">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Definition: one of the two sides of an association; it references a class/data."/>
    </eAnnotations>
    <eAnnotations source="http://www.bluexml.com/OCL">
      <details key="noSpecialCharacters" value="self.name.regexMatch('[\w\(\),]*') = true"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="noSpecialChracters"/>
    </eAnnotations>
    <eOperations name="isMandatory" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="cardMin.toInteger() > 0"/>
        <details key="description" value="returns true if the association end is mandatory"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isMany" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="(cardMax.toInteger() > 1) or (cardMax.toInteger() = -1)"/>
        <details key="description" value="returns true if the association end has a multiple cardinality"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getOpposite" eType="#//AssociationEnd">
      <eAnnotations source="http://www.bluexml.com/OCL">
        <details key="body" value="let parent : Association = Association.allInstances() -> select(a | a.firstEnd = self or a.secondEnd = self) -> asSequence() -> first() in if (parent.firstEnd = self) then parent.secondEnd else parent.firstEnd endif"/>
        <details key="description" value="returns the other side of the containing association"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardMin" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
        defaultValueLiteral="0">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: the minimum number (minimum cardinality) of instances of the targeted class which participate to the association.&#xD;&#xA;Example: let's consider a relation between a resume content and a working contract. The resume end association having a minimum cardinality of 0 means that a working contract may not be related to a resume. A cardinality of 1 indicates that at least one resume must be associated to a working contract.&#xD;&#xA;Constraints: the number must be equals or superior to 0."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="cardMax" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
        defaultValueLiteral="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: the maximum number (maximum cardinality) of instances of the targeted class which participate to the association.&#xD;&#xA;Example: let's consider a relation between a resume content and a working contract. The resume end association having a maximum cardinality of 1 means that a working contract is related to at most one resume. A cardinality of * indicates that as many resume as you want may be associated to a working contract.&#xD;&#xA;Constraints: the number must be superior to 0."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="navigable" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Definition: if false, this boolean indicates that the association is not navigable ie it is not possible to pass through the association.&#xD;&#xA;Example: let's consider a relation between a resume content and a working contract which is not navigable on the resume end association and navigable on the working contract. This means that the working contract instances will not store resume instances list (it is not possible from a working contract to list the associated resume) and that the resume instances will store working contract instances list (it is possible from a resume to list the associated working contracts)."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="linkedClass" eType="#//AbstractClass"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Model" eSuperTypes="#//ClassPackage"/>
</ecore:EPackage>
