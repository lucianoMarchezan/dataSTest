<?xml version="1.0" ?>
<!--GENERATED FILE, PLEASE DO NOT EDIT!!!--><EXT object="Init" version="4">
  <OBJECT>
    <ID name="Init" mc="Standard.Class" uid="8c53a193-0c61-4e40-bdc8-0949df424430"/>
    <PID name="checklist" mc="Standard.Package" uid="d3172d23-c2e5-47a2-a85e-853123e0112e"/>
    <ATTRIBUTES>
      <ATT name="IsActive">false</ATT>
      <ATT name="IsMain">false</ATT>
      <ATT name="IsElementary">false</ATT>
      <ATT name="IsAbstract">false</ATT>
      <ATT name="IsLeaf">false</ATT>
      <ATT name="IsRoot">false</ATT>
      <ATT name="Visibility">Public</ATT>
      <ATT name="Name"><![CDATA[Init]]></ATT>
      <ATT name="status">1970354901745664</ATT>
    </ATTRIBUTES>
    <DEPENDENCIES>
      <COMP relation="OwnedOperation">
        <OBJECT>
          <ID name="init" mc="Standard.Operation" uid="5b5ce786-a4d1-418c-96e0-b0cad211260f"/>
          <ATTRIBUTES>
            <ATT name="Concurrency">false</ATT>
            <ATT name="Final">false</ATT>
            <ATT name="Passing">MethodOut</ATT>
            <ATT name="Visibility">Public</ATT>
            <ATT name="IsClass">true</ATT>
            <ATT name="IsAbstract">false</ATT>
            <ATT name="Name"><![CDATA[init]]></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <COMP relation="Descriptor">
              <OBJECT>
                <ID name="" mc="Infrastructure.Note" uid="793ce165-2b09-4a37-81ba-a7146d45940e"/>
                <ATTRIBUTES>
                  <ATT name="Content"><![CDATA[static initializer, register all appropriate critics.]]></ATT>
                  <ATT name="MimeType"><![CDATA[text/plain]]></ATT>
                  <ATT name="Name"></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="Model">
                    <FOREIGNID name="Javadoc" mc="Infrastructure.NoteType" uid="003800a8-0000-015f-0000-000000000000"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="" mc="Infrastructure.Note" uid="10dc6f7c-72db-41ab-a6d4-5510409716c9"/>
                <ATTRIBUTES>
                  <ATT name="Content"><![CDATA[createChecklists();]]></ATT>
                  <ATT name="MimeType"><![CDATA[text/plain]]></ATT>
                  <ATT name="Name"></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="Model">
                    <FOREIGNID name="JavaCode" mc="Infrastructure.NoteType" uid="003800a8-0000-018e-0000-000000000000"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
            </COMP>
          </DEPENDENCIES>
        </OBJECT>
        <OBJECT>
          <ID name="newCheckItem" mc="Standard.Operation" uid="a39390be-f675-4b0b-b066-91f6c30fca36"/>
          <ATTRIBUTES>
            <ATT name="Concurrency">false</ATT>
            <ATT name="Final">false</ATT>
            <ATT name="Passing">MethodOut</ATT>
            <ATT name="Visibility">Private</ATT>
            <ATT name="IsClass">true</ATT>
            <ATT name="IsAbstract">false</ATT>
            <ATT name="Name"><![CDATA[newCheckItem]]></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <COMP relation="IO">
              <OBJECT>
                <ID name="category" mc="Standard.Parameter" uid="5ca65a4e-a60e-473b-888f-f72e8063651e"/>
                <ATTRIBUTES>
                  <ATT name="ParameterPassing">In</ATT>
                  <ATT name="MultiplicityMin"><![CDATA[1]]></ATT>
                  <ATT name="MultiplicityMax"><![CDATA[1]]></ATT>
                  <ATT name="TypeConstraint"></ATT>
                  <ATT name="DefaultValue"></ATT>
                  <ATT name="IsOrdered">false</ATT>
                  <ATT name="IsUnique">false</ATT>
                  <ATT name="IsException">false</ATT>
                  <ATT name="IsStream">false</ATT>
                  <ATT name="Effect">ReadEffect</ATT>
                  <ATT name="Name"><![CDATA[category]]></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <COMP relation="Tag">
                    <OBJECT>
                      <ID name="" mc="Infrastructure.TaggedValue" uid="63bf5bab-d6fd-4b6b-827a-3ada8dbb5feb"/>
                      <ATTRIBUTES>
                        <ATT name="Name"></ATT>
                        <ATT name="status">1970354901745664</ATT>
                      </ATTRIBUTES>
                      <DEPENDENCIES>
                        <COMP relation="Actual">
                          <OBJECT>
                            <ID name="" mc="Infrastructure.TagParameter" uid="7e97dda1-15be-4ab8-963f-66ab5ec1f3c2"/>
                            <ATTRIBUTES>
                              <ATT name="Value"><![CDATA[String]]></ATT>
                              <ATT name="status">1970354901745664</ATT>
                            </ATTRIBUTES>
                            <DEPENDENCIES></DEPENDENCIES>
                          </OBJECT>
                        </COMP>
                        <LINK relation="Definition">
                          <FOREIGNID name="JavaTypeExpr" mc="Infrastructure.TagType" uid="00380080-0000-01a4-0000-000000000000"/>
                        </LINK>
                      </DEPENDENCIES>
                    </OBJECT>
                  </COMP>
                  <COMP relation="Descriptor">
                    <OBJECT>
                      <ID name="" mc="Infrastructure.Note" uid="1ef71fa8-aadc-4416-b901-82f916dee12f"/>
                      <ATTRIBUTES>
                        <ATT name="Content"><![CDATA[to add the item to.]]></ATT>
                        <ATT name="MimeType"></ATT>
                        <ATT name="Name"></ATT>
                        <ATT name="status">1970354901745664</ATT>
                      </ATTRIBUTES>
                      <DEPENDENCIES>
                        <LINK relation="Model">
                          <FOREIGNID name="Javadoc" mc="Infrastructure.NoteType" uid="01240268-0000-0044-0000-000000000000"/>
                        </LINK>
                      </DEPENDENCIES>
                    </OBJECT>
                  </COMP>
                </DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="key" mc="Standard.Parameter" uid="fbce477d-a1e1-4345-ace9-f2fca43f3db2"/>
                <ATTRIBUTES>
                  <ATT name="ParameterPassing">In</ATT>
                  <ATT name="MultiplicityMin"><![CDATA[1]]></ATT>
                  <ATT name="MultiplicityMax"><![CDATA[1]]></ATT>
                  <ATT name="TypeConstraint"></ATT>
                  <ATT name="DefaultValue"></ATT>
                  <ATT name="IsOrdered">false</ATT>
                  <ATT name="IsUnique">false</ATT>
                  <ATT name="IsException">false</ATT>
                  <ATT name="IsStream">false</ATT>
                  <ATT name="Effect">ReadEffect</ATT>
                  <ATT name="Name"><![CDATA[key]]></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <COMP relation="Tag">
                    <OBJECT>
                      <ID name="" mc="Infrastructure.TaggedValue" uid="b057fdfe-99dd-474f-8982-ecce3ddc68a8"/>
                      <ATTRIBUTES>
                        <ATT name="Name"></ATT>
                        <ATT name="status">1970354901745664</ATT>
                      </ATTRIBUTES>
                      <DEPENDENCIES>
                        <COMP relation="Actual">
                          <OBJECT>
                            <ID name="" mc="Infrastructure.TagParameter" uid="970867c6-f78d-4ca2-8e03-6cc26b9310b0"/>
                            <ATTRIBUTES>
                              <ATT name="Value"><![CDATA[String]]></ATT>
                              <ATT name="status">1970354901745664</ATT>
                            </ATTRIBUTES>
                            <DEPENDENCIES></DEPENDENCIES>
                          </OBJECT>
                        </COMP>
                        <LINK relation="Definition">
                          <FOREIGNID name="JavaTypeExpr" mc="Infrastructure.TagType" uid="00380080-0000-01a4-0000-000000000000"/>
                        </LINK>
                      </DEPENDENCIES>
                    </OBJECT>
                  </COMP>
                  <COMP relation="Descriptor">
                    <OBJECT>
                      <ID name="" mc="Infrastructure.Note" uid="b39dbf4e-cf73-401b-8c55-457437af8d91"/>
                      <ATTRIBUTES>
                        <ATT name="Content"><![CDATA[to get the localized string.]]></ATT>
                        <ATT name="MimeType"></ATT>
                        <ATT name="Name"></ATT>
                        <ATT name="status">1970354901745664</ATT>
                      </ATTRIBUTES>
                      <DEPENDENCIES>
                        <LINK relation="Model">
                          <FOREIGNID name="Javadoc" mc="Infrastructure.NoteType" uid="01240268-0000-0044-0000-000000000000"/>
                        </LINK>
                      </DEPENDENCIES>
                    </OBJECT>
                  </COMP>
                </DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="checklist" mc="Standard.Parameter" uid="96b01515-beab-410d-8cec-82018d42f17f"/>
                <ATTRIBUTES>
                  <ATT name="ParameterPassing">In</ATT>
                  <ATT name="MultiplicityMin"><![CDATA[1]]></ATT>
                  <ATT name="MultiplicityMax"><![CDATA[1]]></ATT>
                  <ATT name="TypeConstraint"></ATT>
                  <ATT name="DefaultValue"></ATT>
                  <ATT name="IsOrdered">false</ATT>
                  <ATT name="IsUnique">false</ATT>
                  <ATT name="IsException">false</ATT>
                  <ATT name="IsStream">false</ATT>
                  <ATT name="Effect">ReadEffect</ATT>
                  <ATT name="Name"><![CDATA[checklist]]></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="Type">
                    <ID name="Checklist" mc="Standard.Class" uid="78e9e74e-49c3-4cc5-a540-8586c99e2653"/>
                  </LINK>
                  <COMP relation="Descriptor">
                    <OBJECT>
                      <ID name="" mc="Infrastructure.Note" uid="09ea6391-09f2-4996-a091-77020b71e64e"/>
                      <ATTRIBUTES>
                        <ATT name="Content"><![CDATA[to add the item to.]]></ATT>
                        <ATT name="MimeType"></ATT>
                        <ATT name="Name"></ATT>
                        <ATT name="status">1970354901745664</ATT>
                      </ATTRIBUTES>
                      <DEPENDENCIES>
                        <LINK relation="Model">
                          <FOREIGNID name="Javadoc" mc="Infrastructure.NoteType" uid="01240268-0000-0044-0000-000000000000"/>
                        </LINK>
                      </DEPENDENCIES>
                    </OBJECT>
                  </COMP>
                </DEPENDENCIES>
              </OBJECT>
            </COMP>
            <COMP relation="Descriptor">
              <OBJECT>
                <ID name="" mc="Infrastructure.Note" uid="9a1e512b-684d-4220-8abb-ad7b45169d88"/>
                <ATTRIBUTES>
                  <ATT name="Content"><![CDATA[Creat a check item (an UMLCheckItem) corresponding to the given key.
and add it to the given checklist.]]></ATT>
                  <ATT name="MimeType"><![CDATA[text/plain]]></ATT>
                  <ATT name="Name"></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="Model">
                    <FOREIGNID name="Javadoc" mc="Infrastructure.NoteType" uid="003800a8-0000-015f-0000-000000000000"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="" mc="Infrastructure.Note" uid="d14cd4a1-f404-48d6-b124-778bfb3b214f"/>
                <ATTRIBUTES>
                  <ATT name="Content"><![CDATA[CheckItem checkitem =
    new UMLCheckItem(category, Translator.localize(key));
checklist.add(checkitem);
]]></ATT>
                  <ATT name="MimeType"><![CDATA[text/plain]]></ATT>
                  <ATT name="Name"></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="Model">
                    <FOREIGNID name="JavaCode" mc="Infrastructure.NoteType" uid="003800a8-0000-018e-0000-000000000000"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
            </COMP>
          </DEPENDENCIES>
        </OBJECT>
        <OBJECT>
          <ID name="createChecklists" mc="Standard.Operation" uid="b9f08f08-334f-42ab-99ad-16df701ca45d"/>
          <ATTRIBUTES>
            <ATT name="Concurrency">false</ATT>
            <ATT name="Final">false</ATT>
            <ATT name="Passing">MethodOut</ATT>
            <ATT name="Visibility">Private</ATT>
            <ATT name="IsClass">true</ATT>
            <ATT name="IsAbstract">false</ATT>
            <ATT name="Name"><![CDATA[createChecklists]]></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <COMP relation="Descriptor">
              <OBJECT>
                <ID name="" mc="Infrastructure.Note" uid="1ca173a7-af8a-4f13-9001-1c1af6fca777"/>
                <ATTRIBUTES>
                  <ATT name="Content"><![CDATA[Create all check lists.<p>

This is the new implementation and a change from the old implementation
in that the source code (i.e. this function) contains knowledge on
what to check.<p>

The purpose of this is to allow the ArgoUML project to jointly develop
the knowledge database and let the internationalizations be just
internationalizations.<p>

When adding a new check list or an item to an existing check list you
will have to:<ol>
<li>Add the lines in this function.
<li>Add the tags for the new items to the i18n property file
(checklist.properties).
<li>Notify the localization teams.
</ol>]]></ATT>
                  <ATT name="MimeType"><![CDATA[text/plain]]></ATT>
                  <ATT name="Name"></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="Model">
                    <FOREIGNID name="Javadoc" mc="Infrastructure.NoteType" uid="003800a8-0000-015f-0000-000000000000"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
              <OBJECT>
                <ID name="" mc="Infrastructure.Note" uid="f4746e33-2022-4d46-8e96-adfe4d20d166"/>
                <ATTRIBUTES>
                  <ATT name="Content"><![CDATA[//
// This function will, by design, contain long lists of i18n keys.
// It might be tempting to shorten these by constructing them from
// the parts but please then consider that we might loose the
// possibility to build tools to statically check the property files
// against this file.
//
Checklist cl;
String cat;

// Class
cl = new Checklist();

cat = Translator.localize("checklist.class.naming");
newCheckItem(cat, "checklist.class.naming.describe-clearly", cl);
newCheckItem(cat, "checklist.class.naming.is-noun", cl);
newCheckItem(cat, "checklist.class.naming.misinterpret", cl);

cat = Translator.localize("checklist.class.encoding");
newCheckItem(cat, "checklist.class.encoding.convert-to-attribute", cl);
newCheckItem(cat, "checklist.class.encoding.do-just-one-thing", cl);
newCheckItem(cat, "checklist.class.encoding.break-into-parts", cl);

cat = Translator.localize("checklist.class.value");
newCheckItem(cat, "checklist.class.value.start-with-meaningful-values",
         cl);
newCheckItem(cat, "checklist.class.value.convert-to-invariant", cl);
newCheckItem(cat,
     "checklist.class.value.establish-invariant-in-constructors",
     cl);
newCheckItem(cat, "checklist.class.value.maintain-invariant", cl);

cat = Translator.localize("checklist.class.location");
newCheckItem(cat, "checklist.class.location.move-somewhere", cl);
newCheckItem(cat, "checklist.class.location.planned-subclasses", cl);
newCheckItem(cat, "checklist.class.location.eliminate-from-model", cl);
newCheckItem(cat,
        "checklist.class.location.eliminates-or-affects-something-else",
    cl);

cat = Translator.localize("checklist.class.updates");
    newCheckItem(cat, "checklist.class.updates.reasons-for-update", cl);
newCheckItem(cat, "checklist.class.updates.affects-something-else", cl);

CheckManager.register(Model.getMetaTypes().getUMLClass(), cl);


// Attribute
cl = new Checklist();

cat = Translator.localize("checklist.attribute.naming");
newCheckItem(cat, "checklist.attribute.naming.describe-clearly", cl);
newCheckItem(cat, "checklist.attribute.naming.is-noun", cl);
newCheckItem(cat, "checklist.attribute.naming.misinterpret", cl);

cat = Translator.localize("checklist.attribute.encoding");
newCheckItem(cat, "checklist.attribute.encoding.is-too-restrictive",
         cl);
newCheckItem(cat,
         "checklist.attribute.encoding.allow-impossible-values",
         cl);
newCheckItem(cat, "checklist.attribute.encoding.combine-with-other",
         cl);
newCheckItem(cat, "checklist.attribute.encoding.break-into-parts", cl);
newCheckItem(cat, "checklist.attribute.encoding.is-computable", cl);

cat = Translator.localize("checklist.attribute.value");
newCheckItem(cat, "checklist.attribute.value.default-value", cl);
newCheckItem(cat, "checklist.attribute.value.correct-default-value",
         cl);
newCheckItem(cat, "checklist.attribute.value.is-correctness-checkable",
         cl);

cat = Translator.localize("checklist.attribute.location");
newCheckItem(cat, "checklist.attribute.location.move-somewhere", cl);
newCheckItem(cat, "checklist.attribute.location.move-up-hierarchy", cl);
newCheckItem(cat, "checklist.attribute.location.include-all", cl);
newCheckItem(cat, "checklist.attribute.location.could-be-eliminated",
         cl);
newCheckItem(cat,
    "checklist.attribute.location.eliminates-or-affects-something-else",
    cl);

cat = Translator.localize("checklist.attribute.updates");
    newCheckItem(cat, "checklist.attribute.updates.reasons-for-update", cl);
newCheckItem(cat, "checklist.attribute.updates.affects-something-else",
         cl);
newCheckItem(cat,
         "checklist.attribute.updates.exists-method-for-update",
         cl);
newCheckItem(cat,
    "checklist.attribute.updates.exists-method-for-specific-value",
    cl);

CheckManager.register(Model.getMetaTypes().getAttribute(), cl);


// Operation
cl = new Checklist();

cat = Translator.localize("checklist.operation.naming");
newCheckItem(cat, "checklist.operation.naming.describe-clearly", cl);
newCheckItem(cat, "checklist.operation.naming.is-verb", cl);
newCheckItem(cat, "checklist.operation.naming.misinterpret", cl);
newCheckItem(cat, "checklist.operation.naming.do-just-one-thing", cl);

cat = Translator.localize("checklist.operation.encoding");
newCheckItem(cat,
    "checklist.operation.encoding.is-returntype-too-restrictive",
    cl);
newCheckItem(cat,
    "checklist.operation.encoding.does-returntype-allow-impossible-"
        + "values", cl);
newCheckItem(cat,
        "checklist.operation.encoding.combine-with-other", cl);
newCheckItem(cat, "checklist.operation.encoding.break-into-parts", cl);
newCheckItem(cat, "checklist.operation.encoding.break-into-series", cl);
newCheckItem(cat, "checklist.operation.encoding.reduce-number-of-calls",
         cl);

cat = Translator.localize("checklist.operation.value");
newCheckItem(cat, "checklist.operation.value.handle-all-inputs", cl);
newCheckItem(cat, "checklist.operation.value.are-special-cases", cl);
newCheckItem(cat, "checklist.operation.value.is-correctness-checkable",
         cl);
newCheckItem(cat,
         "checklist.operation.value.express-preconditions-possible",
         cl);
newCheckItem(cat,
    "checklist.operation.value.express-postconditions-possible",
    cl);
newCheckItem(cat,
    "checklist.operation.value.how-behave-preconditions-violated",
    cl);
newCheckItem(cat,
    "checklist.operation.value.how-behave-postconditions-not-achieved",
    cl);

cat = Translator.localize("checklist.operation.location");
newCheckItem(cat, "checklist.operation.location.move-somewhere", cl);
newCheckItem(cat, "checklist.operation.location.move-up-hierarchy", cl);
newCheckItem(cat, "checklist.operation.location.include-all", cl);
newCheckItem(cat, "checklist.operation.location.could-be-eliminated",
         cl);
newCheckItem(cat,
    "checklist.operation.location.eliminates-or-affects-something-else",
    cl);

CheckManager.register(Model.getMetaTypes().getOperation(), cl);



// Association
cl = new Checklist();

cat = Translator.localize("checklist.association.naming");
newCheckItem(cat, "checklist.association.naming.describe-clearly", cl);
newCheckItem(cat, "checklist.association.naming.is-noun", cl);
newCheckItem(cat, "checklist.association.naming.misinterpret", cl);

cat = Translator.localize("checklist.association.encoding");
newCheckItem(cat, "checklist.association.encoding.convert-to-attribute",
         cl);
newCheckItem(cat, "checklist.association.encoding.do-just-one-thing",
         cl);
newCheckItem(cat, "checklist.association.encoding.break-into-parts",
         cl);

cat = Translator.localize("checklist.association.value");
newCheckItem(cat,
         "checklist.association.value.start-with-meaningful-values",
         cl);
newCheckItem(cat, "checklist.association.value.convert-to-invariant",
         cl);
newCheckItem(cat,
    "checklist.association.value.establish-invariant-in-constructors",
    cl);
newCheckItem(cat, "checklist.association.value.maintain-invariant", cl);

cat = Translator.localize("checklist.association.location");
newCheckItem(cat, "checklist.association.location.move-somewhere", cl);
newCheckItem(cat, "checklist.association.location.planned-subclasses",
         cl);
newCheckItem(cat, "checklist.association.location.eliminate-from-model",
         cl);
newCheckItem(cat,
    "checklist.association.location.eliminates-or-affects-"
        + "something-else", cl);

cat = Translator.localize("checklist.association.updates");
newCheckItem(cat, "checklist.association.updates.reasons-for-update",
         cl);
newCheckItem(cat,
        "checklist.association.updates.affects-something-else",
    cl);

CheckManager.register(Model.getMetaTypes().getAssociation(), cl);


// Interface
cl = new Checklist();

cat = Translator.localize("checklist.interface.naming");
newCheckItem(cat, "checklist.interface.naming.describe-clearly", cl);
newCheckItem(cat, "checklist.interface.naming.is-noun", cl);
newCheckItem(cat, "checklist.interface.naming.misinterpret", cl);

cat = Translator.localize("checklist.interface.encoding");
newCheckItem(cat, "checklist.interface.encoding.convert-to-attribute",
         cl);
newCheckItem(cat, "checklist.interface.encoding.do-just-one-thing", cl);
newCheckItem(cat, "checklist.interface.encoding.break-into-parts", cl);

cat = Translator.localize("checklist.interface.value");
newCheckItem(cat,
         "checklist.interface.value.start-with-meaningful-values",
         cl);
newCheckItem(cat, "checklist.interface.value.convert-to-invariant", cl);
newCheckItem(cat,
    "checklist.interface.value.establish-invariant-in-constructors",
    cl);
newCheckItem(cat, "checklist.interface.value.maintain-invariant", cl);

cat = Translator.localize("checklist.interface.location");
newCheckItem(cat, "checklist.interface.location.move-somewhere", cl);
newCheckItem(cat, "checklist.interface.location.planned-subclasses",
         cl);
newCheckItem(cat, "checklist.interface.location.eliminate-from-model",
         cl);
newCheckItem(cat,
    "checklist.interface.location.eliminates-or-affects-something-else",
    cl);

cat = Translator.localize("checklist.interface.updates");
newCheckItem(cat, "checklist.interface.updates.reasons-for-update", cl);
newCheckItem(cat, "checklist.interface.updates.affects-something-else",
         cl);

CheckManager.register(Model.getMetaTypes().getInterface(), cl);


// Instance
if (Model.getFacade().getUmlVersion().startsWith("1")) {
        cl = new Checklist();

        cat = Translator.localize("checklist.instance.general");
        newCheckItem(cat, "checklist.instance.general.describe-clearly", cl);

        cat = Translator.localize("checklist.instance.naming");
        newCheckItem(cat, "checklist.instance.naming.describe-clearly", cl);
        newCheckItem(cat, "checklist.instance.naming.denotes-state", cl);
        newCheckItem(cat, "checklist.instance.naming.misinterpret", cl);

        cat = Translator.localize("checklist.instance.structure");
        newCheckItem(cat, "checklist.instance.structure.merged-with-other", cl);
        newCheckItem(cat, "checklist.instance.structure.do-just-one-thing", cl);
        newCheckItem(cat, "checklist.instance.structure.break-into-parts", cl);
        newCheckItem(cat,
            "checklist.instance.structure.can-write-characteristic-equation",
            cl);
        newCheckItem(cat, "checklist.instance.structure.belong", cl);
        newCheckItem(cat, "checklist.instance.structure.make-internal", cl);
        newCheckItem(cat,
            "checklist.instance.structure.is-state-in-another-machine-"
            + "exclusive", cl);

        cat = Translator.localize("checklist.instance.actions");
        newCheckItem(cat, "checklist.instance.actions.list-entry-actions", cl);
        newCheckItem(cat,
            "checklist.instance.actions.update-attribute-on-entry",
            cl);
        newCheckItem(cat, "checklist.instance.actions.list-exit-action", cl);
        newCheckItem(cat, "checklist.instance.actions.update-attribute-on-exit",
            cl);
        newCheckItem(cat, "checklist.instance.actions.list-do-action", cl);
        newCheckItem(cat, "checklist.instance.actions.maintained-state", cl);
        cat = Translator.localize("checklist.instance.transitions");
        newCheckItem(cat,
            "checklist.instance.transitions.need-another-transition-into",
            cl);
        newCheckItem(cat,
            "checklist.instance.transitions.use-all-transitions-into",
            cl);
        newCheckItem(cat,
            "checklist.instance.transitions.combine-with-other-incoming",
            cl);
        newCheckItem(cat,
            "checklist.instance.transitions.need-another-transition-out-of",
            cl);
        newCheckItem(cat,
            "checklist.instance.transitions.use-all-transitions-out-of",
            cl);
        newCheckItem(cat,
            "checklist.instance.transitions.are-transitions-out-of-exclusive",
            cl);
        newCheckItem(cat,
            "checklist.instance.transitions.combine-with-other-outgoing",
            cl);
        CheckManager.register(Model.getMetaTypes().getInstance(), cl);
}

// Link
cl = new Checklist();

cat = Translator.localize("checklist.link.naming");
newCheckItem(cat, "checklist.link.naming.describe-clearly", cl);
newCheckItem(cat, "checklist.link.naming.is-noun", cl);
newCheckItem(cat, "checklist.link.naming.misinterpret", cl);

cat = Translator.localize("checklist.link.encoding");
newCheckItem(cat, "checklist.link.encoding.convert-to-attribute", cl);
newCheckItem(cat, "checklist.link.encoding.do-just-one-thing", cl);
newCheckItem(cat, "checklist.link.encoding.break-into-parts", cl);

cat = Translator.localize("checklist.link.value");
newCheckItem(cat, "checklist.link.value.start-with-meaningful-values",
         cl);
newCheckItem(cat, "checklist.link.value.convert-to-invariant", cl);
newCheckItem(cat,
         "checklist.link.value.establish-invariant-in-constructors",
         cl);
newCheckItem(cat, "checklist.link.value.maintain-invariant", cl);

cat = Translator.localize("checklist.link.location");
newCheckItem(cat, "checklist.link.location.move-somewhere", cl);
newCheckItem(cat, "checklist.link.location.planned-subclasses", cl);
newCheckItem(cat, "checklist.link.location.eliminate-from-model", cl);
newCheckItem(cat,
    "checklist.link.location.eliminates-or-affects-something-else",
    cl);

cat = Translator.localize("checklist.link.updates");
newCheckItem(cat, "checklist.link.updates.reasons-for-update", cl);
newCheckItem(cat, "checklist.link.updates.affects-something-else", cl);

CheckManager.register(Model.getMetaTypes().getLink(), cl);


// State
cl = new Checklist();

cat = Translator.localize("checklist.state.naming");
newCheckItem(cat, "checklist.state.naming.describe-clearly", cl);
newCheckItem(cat, "checklist.state.naming.denotes-state", cl);
newCheckItem(cat, "checklist.state.naming.misinterpret", cl);

cat = Translator.localize("checklist.state.structure");
newCheckItem(cat, "checklist.state.structure.merged-with-other", cl);
newCheckItem(cat, "checklist.state.structure.do-just-one-thing", cl);
newCheckItem(cat, "checklist.state.structure.break-into-parts", cl);
newCheckItem(cat,
    "checklist.state.structure.can-write-characteristic-equation",
    cl);
newCheckItem(cat, "checklist.state.structure.belong", cl);
newCheckItem(cat, "checklist.state.structure.make-internal", cl);
newCheckItem(cat,
    "checklist.state.structure.is-state-in-another-machine-exclusive",
    cl);

cat = Translator.localize("checklist.state.actions");
newCheckItem(cat, "checklist.state.actions.list-entry-actions", cl);
newCheckItem(cat, "checklist.state.actions.update-attribute-on-entry",
         cl);
newCheckItem(cat, "checklist.state.actions.list-exit-action", cl);
newCheckItem(cat, "checklist.state.actions.update-attribute-on-exit",
         cl);
newCheckItem(cat, "checklist.state.actions.list-do-action", cl);
newCheckItem(cat, "checklist.state.actions.maintained-state", cl);

cat = Translator.localize("checklist.state.transitions");
newCheckItem(cat,
    "checklist.state.transitions.need-another-transition-into",
    cl);
newCheckItem(cat,
    "checklist.state.transitions.use-all-transitions-into",
    cl);
newCheckItem(cat,
    "checklist.state.transitions.combine-with-other-incoming",
    cl);
newCheckItem(cat,
    "checklist.state.transitions.need-another-transition-out-of",
    cl);
newCheckItem(cat,
    "checklist.state.transitions.use-all-transitions-out-of",
    cl);
newCheckItem(cat,
    "checklist.state.transitions.are-transitions-out-of-exclusive",
    cl);
newCheckItem(cat,
    "checklist.state.transitions.combine-with-other-outgoing",
    cl);

CheckManager.register(Model.getMetaTypes().getState(), cl);


// Transition
cl = new Checklist();

cat = Translator.localize("checklist.transition.structure");
newCheckItem(cat, "checklist.transition.structure.start-somewhere-else",
         cl);
newCheckItem(cat, "checklist.transition.structure.end-somewhere-else",
         cl);
newCheckItem(cat,
         "checklist.transition.structure.need-another-like-this",
         cl);
newCheckItem(cat,
         "checklist.transition.structure.unneeded-because-of-this",
         cl);

cat = Translator.localize("checklist.transition.trigger");
newCheckItem(cat, "checklist.transition.trigger.needed", cl);
newCheckItem(cat, "checklist.transition.trigger.happen-too-often", cl);
newCheckItem(cat, "checklist.transition.trigger.happen-too-rarely", cl);

cat = Translator.localize("checklist.transition.guard");
newCheckItem(cat, "checklist.transition.guard.taken-too-often", cl);
newCheckItem(cat, "checklist.transition.guard.is-too-restrictive", cl);
newCheckItem(cat, "checklist.transition.guard.break-into-parts", cl);

cat = Translator.localize("checklist.transition.actions");
newCheckItem(cat, "checklist.transition.actions.should-have", cl);
newCheckItem(cat, "checklist.transition.actions.should-have-exit", cl);
newCheckItem(cat, "checklist.transition.actions.should-have-entry", cl);
newCheckItem(cat, "checklist.transition.actions.is-precondition-met",
         cl);
newCheckItem(cat,
    "checklist.transition.actions.is-postcondition-consistant-with-"
        + "destination", cl);

CheckManager.register(Model.getMetaTypes().getTransition(), cl);


// Use Case
cl = new Checklist();

cat = Translator.localize("checklist.usecase.naming");
newCheckItem(cat, "checklist.usecase.naming.describe-clearly", cl);
newCheckItem(cat, "checklist.usecase.naming.is-noun", cl);
newCheckItem(cat, "checklist.usecase.naming.misinterpret", cl);

cat = Translator.localize("checklist.usecase.encoding");
newCheckItem(cat, "checklist.usecase.encoding.convert-to-attribute",
         cl);
newCheckItem(cat, "checklist.usecase.encoding.do-just-one-thing", cl);
newCheckItem(cat, "checklist.usecase.encoding.break-into-parts", cl);

cat = Translator.localize("checklist.usecase.value");
newCheckItem(cat,
         "checklist.usecase.value.start-with-meaningful-values",
         cl);
newCheckItem(cat, "checklist.usecase.value.convert-to-invariant", cl);
newCheckItem(cat,
    "checklist.usecase.value.establish-invariant-in-constructors",
    cl);
newCheckItem(cat, "checklist.usecase.value.maintain-invariant", cl);

cat = Translator.localize("checklist.usecase.location");
newCheckItem(cat, "checklist.usecase.location.move-somewhere", cl);
newCheckItem(cat, "checklist.usecase.location.planned-subclasses", cl);
newCheckItem(cat, "checklist.usecase.location.eliminate-from-model",
         cl);
newCheckItem(cat,
    "checklist.usecase.location.eliminates-or-affects-something-else",
    cl);

cat = Translator.localize("checklist.usecase.updates");
newCheckItem(cat, "checklist.usecase.updates.reasons-for-update", cl);
newCheckItem(cat, "checklist.usecase.updates.affects-something-else",
         cl);

CheckManager.register(Model.getMetaTypes().getUseCase(), cl);


// Actor
cl = new Checklist();

cat = Translator.localize("checklist.actor.naming");
newCheckItem(cat, "checklist.actor.naming.describe-clearly", cl);
newCheckItem(cat, "checklist.actor.naming.is-noun", cl);
newCheckItem(cat, "checklist.actor.naming.misinterpret", cl);

cat = Translator.localize("checklist.actor.encoding");
newCheckItem(cat, "checklist.actor.encoding.convert-to-attribute", cl);
newCheckItem(cat, "checklist.actor.encoding.do-just-one-thing", cl);
newCheckItem(cat, "checklist.actor.encoding.break-into-parts", cl);

cat = Translator.localize("checklist.actor.value");
newCheckItem(cat, "checklist.actor.value.start-with-meaningful-values",
         cl);
newCheckItem(cat, "checklist.actor.value.convert-to-invariant", cl);
newCheckItem(cat,
    "checklist.actor.value.establish-invariant-in-constructors",
    cl);
newCheckItem(cat, "checklist.actor.value.maintain-invariant", cl);

cat = Translator.localize("checklist.actor.location");
newCheckItem(cat, "checklist.actor.location.move-somewhere", cl);
newCheckItem(cat, "checklist.actor.location.planned-subclasses", cl);
newCheckItem(cat, "checklist.actor.location.eliminate-from-model", cl);
newCheckItem(cat,
        "checklist.actor.location.eliminates-or-affects-something-else",
    cl);

cat = Translator.localize("checklist.actor.updates");
newCheckItem(cat, "checklist.actor.updates.reasons-for-update", cl);
newCheckItem(cat, "checklist.actor.updates.affects-something-else", cl);

CheckManager.register(Model.getMetaTypes().getActor(), cl);
]]></ATT>
                  <ATT name="MimeType"><![CDATA[text/plain]]></ATT>
                  <ATT name="Name"></ATT>
                  <ATT name="status">1970354901745664</ATT>
                </ATTRIBUTES>
                <DEPENDENCIES>
                  <LINK relation="Model">
                    <FOREIGNID name="JavaCode" mc="Infrastructure.NoteType" uid="003800a8-0000-018e-0000-000000000000"/>
                  </LINK>
                </DEPENDENCIES>
              </OBJECT>
            </COMP>
          </DEPENDENCIES>
        </OBJECT>
      </COMP>
      <COMP relation="OwnedImport">
        <OBJECT>
          <ID name="" mc="Standard.ElementImport" uid="26dc0aa6-89c7-45bd-97c0-b20093237141"/>
          <ATTRIBUTES>
            <ATT name="Visibility">Private</ATT>
            <ATT name="Name"></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <LINK relation="ImportedElement">
              <ID name="CheckItem" mc="Standard.Class" uid="89ac69e2-f30a-419d-9c67-5d8d9531b345"/>
            </LINK>
          </DEPENDENCIES>
        </OBJECT>
        <OBJECT>
          <ID name="" mc="Standard.ElementImport" uid="f1982d3b-f86f-48b9-995b-3ee20c43f26f"/>
          <ATTRIBUTES>
            <ATT name="Visibility">Private</ATT>
            <ATT name="Name"></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <LINK relation="ImportedElement">
              <ID name="CheckManager" mc="Standard.Class" uid="43252339-8e73-4ab4-a256-7fe410e608ba"/>
            </LINK>
          </DEPENDENCIES>
        </OBJECT>
        <OBJECT>
          <ID name="" mc="Standard.ElementImport" uid="161c5944-6647-44ea-ba6f-2e55bf7c1b11"/>
          <ATTRIBUTES>
            <ATT name="Visibility">Private</ATT>
            <ATT name="Name"></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <LINK relation="ImportedElement">
              <ID name="Translator" mc="Standard.Class" uid="942846e1-d096-47f8-81d2-6de4ed27547d"/>
            </LINK>
          </DEPENDENCIES>
        </OBJECT>
        <OBJECT>
          <ID name="" mc="Standard.ElementImport" uid="044e389c-03e0-4d3b-8f1c-309eecce46e0"/>
          <ATTRIBUTES>
            <ATT name="Visibility">Private</ATT>
            <ATT name="Name"></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <LINK relation="ImportedElement">
              <ID name="Model" mc="Standard.Class" uid="87265c8f-b494-4f18-9e1a-fd1e0e8afdbe"/>
            </LINK>
          </DEPENDENCIES>
        </OBJECT>
      </COMP>
      <LINK relation="Extension">
        <FOREIGNID name="JavaClass" mc="Infrastructure.Stereotype" uid="01ec23a8-0000-0258-0000-000000000000"/>
      </LINK>
      <COMP relation="Descriptor">
        <OBJECT>
          <ID name="" mc="Infrastructure.Note" uid="0828bb2e-889c-4574-a364-44fabdee2b8b"/>
          <ATTRIBUTES>
            <ATT name="Content"><![CDATA[Registers Checklists for different kinds of model elements. If you
add a new checklist, a line must be added here.

@see org.argouml.cognitive.checklist.CheckManager]]></ATT>
            <ATT name="MimeType"><![CDATA[text/plain]]></ATT>
            <ATT name="Name"></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <LINK relation="Model">
              <FOREIGNID name="Javadoc" mc="Infrastructure.NoteType" uid="003800a8-0000-015d-0000-000000000000"/>
            </LINK>
          </DEPENDENCIES>
        </OBJECT>
        <OBJECT>
          <ID name="" mc="Infrastructure.Note" uid="36141762-8ec7-4bd0-9911-efee42688dd6"/>
          <ATTRIBUTES>
            <ATT name="Content"><![CDATA[// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.]]></ATT>
            <ATT name="MimeType"><![CDATA[text/plain]]></ATT>
            <ATT name="Name"></ATT>
            <ATT name="status">1970354901745664</ATT>
          </ATTRIBUTES>
          <DEPENDENCIES>
            <LINK relation="Model">
              <FOREIGNID name="JavaTop" mc="Infrastructure.NoteType" uid="01840500-0000-a2a0-0000-000000000000"/>
            </LINK>
          </DEPENDENCIES>
        </OBJECT>
      </COMP>
    </DEPENDENCIES>
  </OBJECT>
</EXT>